/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -a dbus_a_image_q -i image_q.hpp -c DBus_Adaptor_Image_Q -l Image_Q dbus_a_image_q.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "dbus_a_image_q.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class DBus_Adaptor_Image_Q
 */

DBus_Adaptor_Image_Q::DBus_Adaptor_Image_Q(Image_Q *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

DBus_Adaptor_Image_Q::~DBus_Adaptor_Image_Q()
{
    // destructor
}

ushort DBus_Adaptor_Image_Q::maximum() const
{
    // get the value of property maximum
    return qvariant_cast< ushort >(parent()->property("maximum"));
}

void DBus_Adaptor_Image_Q::setMaximum(ushort value)
{
    // set the value of property maximum
    parent()->setProperty("maximum", qVariantFromValue(value));
}

bool DBus_Adaptor_Image_Q::addPlane(int colourPlane)
{
    // handle method call name.kuzmashapran.imaginable.image.addPlane
    return parent()->addPlane(colourPlane);
}

void DBus_Adaptor_Image_Q::clear()
{
    // handle method call name.kuzmashapran.imaginable.image.clear
    parent()->clear();
}

void DBus_Adaptor_Image_Q::clearTexts()
{
    // handle method call name.kuzmashapran.imaginable.image.clearTexts
    parent()->clearTexts();
}

QString DBus_Adaptor_Image_Q::colourPlaneToString(int colourPlane)
{
    // handle method call name.kuzmashapran.imaginable.image.colourPlaneToString
    return parent()->colourPlaneToString(colourPlane);
}

uint DBus_Adaptor_Image_Q::colourSpace()
{
    // handle method call name.kuzmashapran.imaginable.image.colourSpace
    return parent()->colourSpace();
}

QString DBus_Adaptor_Image_Q::colourSpaceToString(uint colourSpace)
{
    // handle method call name.kuzmashapran.imaginable.image.colourSpaceToString
    return parent()->colourSpaceToString(colourSpace);
}

bool DBus_Adaptor_Image_Q::empty()
{
    // handle method call name.kuzmashapran.imaginable.image.empty
    return parent()->empty();
}

bool DBus_Adaptor_Image_Q::erasePlaneName(int colourPlane)
{
    // handle method call name.kuzmashapran.imaginable.image.erasePlaneName
    return parent()->erasePlaneName(colourPlane);
}

bool DBus_Adaptor_Image_Q::eraseText(const QString &key)
{
    // handle method call name.kuzmashapran.imaginable.image.eraseText
    return parent()->eraseText(key);
}

bool DBus_Adaptor_Image_Q::hasAlpha()
{
    // handle method call name.kuzmashapran.imaginable.image.hasAlpha
    return parent()->hasAlpha();
}

bool DBus_Adaptor_Image_Q::hasData()
{
    // handle method call name.kuzmashapran.imaginable.image.hasData
    return parent()->hasData();
}

bool DBus_Adaptor_Image_Q::hasPlane(int colourPlane)
{
    // handle method call name.kuzmashapran.imaginable.image.hasPlane
    return parent()->hasPlane(colourPlane);
}

bool DBus_Adaptor_Image_Q::hasText(const QString &key)
{
    // handle method call name.kuzmashapran.imaginable.image.hasText
    return parent()->hasText(key);
}

uint DBus_Adaptor_Image_Q::height()
{
    // handle method call name.kuzmashapran.imaginable.image.height
    return parent()->height();
}

bool DBus_Adaptor_Image_Q::movePlane(int colourPlaneFrom, int colourPlaneTo)
{
    // handle method call name.kuzmashapran.imaginable.image.movePlane
    return parent()->movePlane(colourPlaneFrom, colourPlaneTo);
}

bool DBus_Adaptor_Image_Q::planeHasName(int colourPlane)
{
    // handle method call name.kuzmashapran.imaginable.image.planeHasName
    return parent()->planeHasName(colourPlane);
}

QString DBus_Adaptor_Image_Q::planeName(int colourPlane)
{
    // handle method call name.kuzmashapran.imaginable.image.planeName
    return parent()->planeName(colourPlane);
}

QintList DBus_Adaptor_Image_Q::planes()
{
    // handle method call name.kuzmashapran.imaginable.image.planes
    return parent()->planes();
}

uint DBus_Adaptor_Image_Q::planesCount()
{
    // handle method call name.kuzmashapran.imaginable.image.planesCount
    return parent()->planesCount();
}

bool DBus_Adaptor_Image_Q::removePlane(int colourPlane)
{
    // handle method call name.kuzmashapran.imaginable.image.removePlane
    return parent()->removePlane(colourPlane);
}

bool DBus_Adaptor_Image_Q::setHeight(uint heigth)
{
    // handle method call name.kuzmashapran.imaginable.image.setHeight
    return parent()->setHeight(heigth);
}

bool DBus_Adaptor_Image_Q::setPlaneName(int colourPlane, const QString &name)
{
    // handle method call name.kuzmashapran.imaginable.image.setPlaneName
    return parent()->setPlaneName(colourPlane, name);
}

bool DBus_Adaptor_Image_Q::setSize(uint width, uint heigth)
{
    // handle method call name.kuzmashapran.imaginable.image.setSize
    return parent()->setSize(width, heigth);
}

bool DBus_Adaptor_Image_Q::setText(const QString &key, const QString &value)
{
    // handle method call name.kuzmashapran.imaginable.image.setText
    return parent()->setText(key, value);
}

bool DBus_Adaptor_Image_Q::setWidth(uint width)
{
    // handle method call name.kuzmashapran.imaginable.image.setWidth
    return parent()->setWidth(width);
}

uint DBus_Adaptor_Image_Q::square()
{
    // handle method call name.kuzmashapran.imaginable.image.square
    return parent()->square();
}

QString DBus_Adaptor_Image_Q::text(const QString &key)
{
    // handle method call name.kuzmashapran.imaginable.image.text
    return parent()->text(key);
}

QStringList DBus_Adaptor_Image_Q::textKeys()
{
    // handle method call name.kuzmashapran.imaginable.image.textKeys
    return parent()->textKeys();
}

uint DBus_Adaptor_Image_Q::width()
{
    // handle method call name.kuzmashapran.imaginable.image.width
    return parent()->width();
}

